```--- title: Agentic Documentation System – Technical Guide archetype: technical-doc status: stable owner: Shailesh Rawat maintainer: self version: 1.0 tags: [Docs-as-Code, Agentic System, AI Workflows, Portfolio] last_reviewed: 2025-08-25 ---  # Overview This document explains how to **set up, run, and extend** the Agentic Documentation System.   The system turns structured inputs (briefs, API specs, feedback data) into validated, publishable outputs (API references, user guides, release notes, KB articles, and in-app guidance).  ---  # Why It Matters This guide helps developers, documentation engineers, and technical communicators:   - Understand the folder structure and role-based architecture.   - Run end-to-end pipelines or packet-specific workflows.   - Customize governance policies for style and compliance.   - Contribute new roles or extend outputs safely.    ---  # Audience, Scope & Personas - **Technical Writers / Docs Engineers**: to see how Docs-as-Code pipelines work.   - **Developers**: to extend roles or integrate outputs with CI/CD.   - **Comms / Support Teams**: to leverage feedback-driven KB updates.   - **Researchers**: to study modular, agentic workflows for content generation.    ---  # Prerequisites - **Python 3.11+**   - Optional: `pip install pyyaml` (used for YAML parsing)   - GitHub (if you want to run workflows in CI/CD)    Recommended: set up a **virtual environment**.    ```bash python -m venv .venv source .venv/bin/activate   # macOS/Linux .venv\Scripts\Activate.ps1  # Windows pip install -U pip pyyaml `  
# System Architecture
 `engine/ ├─ run.py                  # CLI entrypoint ├─ graph.py                # Orchestration flow ├─ roles/                  # Modular agent roles │  ├─ intake_router.py │  ├─ researcher.py │  ├─ writer_tech.py │  ├─ writer_support.py │  ├─ writer_inapp.py │  ├─ editor_style.py │  ├─ editor_factual.py │  ├─ compliance_guard.py │  └─ publisher.py ├─ policies/               # Governance rules │  ├─ style.yml │  ├─ compliance.yml │  └─ risk.yml ├─ logs/                   # Execution logs └─ metrics/                # Run-time metrics ` 
Role flow: Intake → Research → Writers → Editors → Compliance → Publisher. All roles use deterministic inputs/outputs and log results to `/engine/logs`.
  
# Tasks & Step-by-Step Instructions
 
### 1. Clone the Repository
 `git clone <repo-url> cd agentic-id-portfolio ` 
### 2. Prepare Intake Files
 
Edit files in `/intake/`:
 
 
- `tech-docs/brief.md` – summary of release or feature
 
- `tech-docs/openapi.yaml` – valid OpenAPI 3.0 spec (endpoints, parameters)
 
- `support/feedback.csv` – table of common queries
 
- `inapp/hints.md` – notes for walkthroughs and tooltips
 

 
### 3. Run the Full Pipeline
 `python -m engine.run --all ` 
### 4. Run Specific Packets
 
Tech Release Packet:
 `python -m engine.run --packet tech-release ` 
KB Update Packet:
 `python -m engine.run --packet kb-update ` 
### 5. Outputs
 
Generated files are stored in `/docs/samples/`, including:
 
 
- `api-reference/` → OpenAPI + human-readable reference
 
- `user-guide/` → Task-based docs
 
- `release-notes/` → Highlights, fixes, API changes
 
- `kb-articles/` → Issue → Cause → Resolution → Prevention
 
- `in-app-guidance/` → `tooltips.json` and `walkthrough.yaml`
 
- `evidence/` → Metrics and decisions logs
 

  
# Access Control & Permissions
 
 
- **Writers**: update intake briefs, specs, feedback.
 
- **Editors**: ensure style + accuracy (via `editor_style.py`, `editor_factual.py`).
 
- **Compliance**: check PII, sources, risk bands.
 
- **Publisher**: final outputs written to `/docs/samples/`.
 

  
# Practical Examples & Templates
 
### Example: API Spec
 `openapi: 3.0.3 info:   title: Backup Service API   version: "1.0.0" paths:   /v1/backups:     get:       summary: List backups       parameters:         - in: query           name: tenantId           schema:             type: string       responses:         "200":           description: OK   /v1/restores:     post:       summary: Start restore job       requestBody:         required: true         content:           application/json:             schema:               type: object               properties:                 backupId: { type: string }                 targetPath: { type: string }       responses:         "202":           description: Accepted ` 
### Example: Feedback Data
 `url,query,ticket_tag,frequency /docs/restore,restore alternate path failed,restore,53 /docs/backup-policy,retention vs immutability,policy,19 `  
# Known Issues & Friction Points
 
 
- Outputs rely on intake quality: vague briefs → generic docs.
 
- Feedback loops require structured CSV with consistent fields.
 
- In-app guidance JSON/YAML must be validated for schema correctness.
 

  
# Tips & Best Practices
 
 
- Keep `openapi.yaml` minimal but valid.
 
- Update `feedback.csv` regularly to simulate real data-driven iteration.
 
- Adjust `style.yml` and `compliance.yml` to enforce your house style.
 
- Use `--update` mode after minor intake edits.
 

  
# Troubleshooting Guidance
 
 
- **KeyError in publisher** → ensure all writer roles return expected keys.
 
- **Nothing changes on re-run** → check that `/intake/*` files were actually updated.
 
- **Invalid YAML/JSON** → run a linter (`yamllint`, `jq`).
 

  
# Dependencies, Risks & Escalation Path
 
 
- **Dependencies**: Python 3.11+, optional PyYAML.
 
- **Risks**: Poor input quality, schema drift in OpenAPI.
 
- **Escalation**: Intake errors → Intake Router; output consistency → Editors; compliance violations → Compliance Guard.
 

  
# Success Metrics & Outcomes
 
 
- Faster content generation cycles
 
- Automated propagation of API changes into docs
 
- Feedback-driven KB updates reducing support load
 
- Governance baked into the doc lifecycle
 

  
# Resources & References
 
 
- `/engine/policies/style.yml`
 
- `/engine/policies/compliance.yml`
 
- `/docs/evidence/metrics.md`
 

  
# Last Reviewed / Last Updated
 
2025-08-25
 ``