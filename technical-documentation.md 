---
title: Agentic Documentation System – Technical Guide
archetype: technical-doc
status: stable
owner: Shailesh Rawat
maintainer: self
version: 1.0.0
tags: [Agentic System, Docs-as-Code, Technical Documentation, AI Workflows]
last_reviewed: 2025-08-25
---
# Overview
This document explains how to set up, run, and extend the agentic documentation system. The system converts structured inputs (briefs, API specs, and feedback data) into validated, publishable outputs (API reference, task-first user guide, release notes, knowledge base articles, and in-app guidance) through a deterministic, role-based pipeline.
# Why It Matters
Documentation must be continuous, governed, user-centric, and measurable. This system enforces Docs-as-Code principles with a minimal agentic workflow so content updates when inputs change, quality gates are applied automatically, and outcomes are tracked with lightweight metrics.
# Audience, Scope & Personas
Primary: Technical Writers, Information Developers, Docs Engineers. Secondary: Developers integrating content workflows; Support/Comms teams using feedback-driven updates; Reviewers assessing technical writing and system design. Scope: Local, offline execution with Python 3.11+; zero external APIs; GitHub-friendly outputs.
# Prerequisites
Python 3.11+; optional PyYAML (if YAML parsing is used). Basic Git and terminal familiarity. A writable working directory. Recommended: use a virtual environment.
# Security, Compliance & Privacy
No network calls; runs entirely against local files. Policies enforce: sources_required for factual claims; PII redaction patterns (email, phone); risk banding for internal vs public artifacts. All decisions are logged under engine/logs. Do not place secrets in intake files or logs.
# Tasks & Step-by-Step Instructions
1) Clone and enter the repository:  git clone <repo-url> ; cd agentic-id-portfolio  2) Create and activate a virtual environment:  python -m venv .venv ; source .venv/bin/activate  (macOS/Linux)  .venv\Scripts\Activate.ps1  (Windows)  3) Install minimal dependencies (optional):  pip install -U pip pyyaml  4) Seed intake files (edit or create as needed):  intake/tech-docs/brief.md       (frontmatter + goals)  intake/tech-docs/openapi.yaml   (valid OpenAPI 3.0.x)  intake/support/feedback.csv     (url,query,ticket_tag,frequency)  intake/inapp/hints.md           (notes for tooltips and walkthrough)  5) Run the full pipeline:  python -m engine.run --all  6) Run a specific packet:  Tech release (API reference, user guide, release notes, in-app):  python -m engine.run --packet tech-release  KB update (knowledge base + metrics from feedback):  python -m engine.run --packet kb-update  7) Re-generate after editing intake files:  python -m engine.run --update  8) Inspect outputs in docs/samples and evidence files under docs/evidence.  9) Commit and push as desired.
# Access Control & Permissions
Writers: update intake briefs/specs/feedback. Editors: apply style and factual checks (via editor roles). Compliance: enforce PII redaction, source presence, and risk band gates. Publisher: writes approved artifacts to docs/samples. Use Git branches and pull requests for collaboration; treat policies as code.
# Practical Examples & Templates (✅/❌)
✅ Intake brief (intake/tech-docs/brief.md) with frontmatter:  ---  title: "Quarterly backup improvements"  owner: "docs/team"  status: "draft"  tags: ["api","user-guide","release-notes","in-app"]  last_reviewed: "2025-08-25"  ---  Goals: Improve policy configuration clarity, surface restore flow in-app, and document new query parameter for listing backups.  ✅ Minimal OpenAPI (intake/tech-docs/openapi.yaml):  openapi: 3.0.3  info: {title: Backup Service API, version: "1.0.0"}  paths:  /v1/backups:    get:      summary: List backups      parameters:        - in: query          name: tenantId          schema: {type: string}      responses: {"200": {description: OK}}  /v1/restores:    post:      summary: Start restore job      requestBody:        required: true        content:          application/json:            schema:              type: object              properties:                backupId: {type: string}                targetPath: {type: string}      responses: {"202": {description: Accepted}}  ✅ Feedback data (intake/support/feedback.csv):  url,query,ticket_tag,frequency  /docs/restore,restore alternate path failed,restore,53  /docs/backup-policy,retention vs immutability,policy,19  ✅ In-app hints (intake/inapp/hints.md):  - First-policy setup tips  - Restore flow nudge and integrity verification  - RBAC least-privilege reminder  ❌ Placeholder text like “TBD”, “lorem ipsum” in outputs  ❌ Unvalidated claims without sources in reference or release notes
# Known Issues & Friction Points
Outputs reflect input quality: vague briefs produce generic text. Schema drift in OpenAPI yields inconsistent references until corrected. In-app JSON/YAML must remain valid; treat their schemas as interfaces. Feedback data should be normalized; inconsistent ticket tags reduce signal.
# Tips & Best Practices
Keep OpenAPI small and valid; expand iteratively. Prefer task-first structure for user guides (preconditions → steps → verification → rollback). Treat prompts/policies as versioned assets; change them with small commits. Keep packets small; avoid large, multi-topic changes. Log early and often; review engine/logs after each run.
# Troubleshooting Guidance
KeyError for missing context keys: ensure role order includes producers before publisher; confirm each role’s run(context) returns the expected keys. Nothing changes on re-run: verify intake files actually changed; use --update to recompute. Invalid YAML/JSON: validate openapi.yaml, tooltips.json, and walkthrough.yaml with a linter. Module not found: run from repo root and use python -m engine.run ... . Empty logs: confirm write permissions and that logging is configured in run.py.
# Dependencies, Risks & Escalation Path
Dependencies: Python 3.11+, optional PyYAML. Risks: weak inputs, untested schema changes, or bypassed governance leading to inconsistent artifacts. Escalation: Intake issues → intake_router; API or reference discrepancies → researcher and writer_tech; KB accuracy or feedback handling → writer_support; style/facts → editor roles; policy breaches → compliance_guard; write failures → publisher.
# Success Metrics & Outcomes
Time-to-first-draft per packet; approval loop count; search success rate movement; top failed queries and KB deflection estimates; release notes time-to-merge; walkthrough completion rates. Track these in docs/evidence/metrics.md; log rationale in docs/evidence/decisions.md.
# Resources & References
engine/run.py — CLI entry; engine/graph.py — role order and packets; engine/roles/* — agent roles (intake_router, researcher, writer_tech, writer_support, writer_inapp, editor_style, editor_factual, compliance_guard, publisher); docs/governance/style.yml and compliance.yml — policies; intake/* — inputs; docs/samples/* — outputs; engine/logs and engine/metrics — execution traces.
# Last Reviewed / Last Updated
2025-08-25